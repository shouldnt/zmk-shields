/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 #include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT_LAYER 0
#define R_LAYER 1
#define L_LAYER 2
#define T_LAYER 3

#define COMBO_TIMEOUT 50

#define THUMB_L_CLOSE 13
#define THUMB_L_FAR 14 
#define THUMB_R_CLOSE 16
#define THUMB_R_FAR 15

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <L_LAYER R_LAYER>;
            then-layer = <T_LAYER>;
        };
    };
    combos {
        compatible = "zmk,combos";
        /*combo chars top row left*/
        combo_Q {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp Q>;
        };
        combo_T {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 2>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp T>;
        };

        /*combo chars top row right*/
        combo_P {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <4 5>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp P>;
        };
        combo_Y {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <3 4>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp Y>;
        };

        /*combo chars middle row left*/
        combo_G {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <7 8>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp G>;
        };
        /*combo chars middle row right*/
        combo_H {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 9>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp H>;
        };

        /*combo chars bottom row left*/
        combo_Z {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <12 THUMB_L_CLOSE>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp Z>;
        };
        combo_X {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 THUMB_L_CLOSE>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp X>;
        };
        combo_C {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <7 THUMB_L_CLOSE>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp C>;
        };
        combo_V {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <8 THUMB_L_CLOSE>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp V>;
        };
        combo_B {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 7>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp B>;
        };

        /*combo chars bottom row right*/
        combo_N {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 11>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp N>;
        };
        combo_M {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 THUMB_R_CLOSE>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp M>;
        };
        combo_COMMA {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 THUMB_R_CLOSE>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp COMMA>;
        };
        combo_DOT {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 THUMB_R_CLOSE>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp PERIOD>;
        };
        combo_SLASH {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <17 THUMB_R_CLOSE>;
            layers = <DEFAULT_LAYER>;
            bindings = <&kp SLASH>;
        };

        // combo r layer
        combo_N9 {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1>;
            layers = <R_LAYER>;
            bindings = <&kp N9>;
        };
        combo_N7 {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 7>;
            layers = <R_LAYER>;
            bindings = <&kp N7>;
        };
        combo_N8 {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <8 7>;
            layers = <R_LAYER>;
            bindings = <&kp N8>;
        };
        combo_N0 {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 2>;
            layers = <R_LAYER>;
            bindings = <&kp N0>;
        };
        combo_LEFT_ARROW {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 10>;
            layers = <R_LAYER>;
            bindings = <&kp LARW>;
        };

        // right layer combo
        combo_ASTERISK {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 10>;
            layers = <L_LAYER>;
            bindings = <&kp ASTRK>;
        };
        combo_PIPE {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 THUMB_R_CLOSE>;
            layers = <L_LAYER>;
            bindings = <&kp PIPE>;
        };
        combo_PLUS {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 THUMB_R_CLOSE>;
            layers = <L_LAYER>;
            bindings = <&kp PLUS>;
        };
        combo_UNDER {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 THUMB_R_CLOSE>;
            layers = <L_LAYER>;
            bindings = <&kp UNDER>;
        };
        combo_AND {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 10 THUMB_R_CLOSE>;
            layers = <L_LAYER>;
            bindings = <&kp AMPS>;
        };
        combo_CLOSE_SQUARE_BRACKET {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1>;
            layers = <L_LAYER>;
            bindings = <&kp RBKT>;
        };
        combo_CLOSE_CURLY_BRACKET {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 2>;
            layers = <L_LAYER>;
            bindings = <&kp RBRC>;
        };
        combo_CARET {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <3 4>;
            layers = <L_LAYER>;
            bindings = <&kp CARET>;
        };

    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                        &ht LALT W   &ht LCTRL E   &kp R                                                                 &kp U        &ht RCTRL I   &ht RALT O      
                        &ht LALT S   &ht LCTRL D   &ht LGUI F                                                            &ht RGUI J   &ht RCTRL K   &ht RALT L           
            &ht LSHFT A                                       &lt L_LAYER TAB   &kp ENTER    &kp SPACE   &lt R_LAYER BSPC                                     &ht RSHFT SINGLE_QUOTE 
            >;
        };

        right_layer {
            bindings = <
                        &kp N1       &kp N2        &kp N3                                                                &trans       &trans        &kp COLON       
                        &kp N4       &kp N5        &kp N6                                                                &kp DARW     &kp UARW      &kp RARW             
            &caps_word                                        &trans            &kp ESC      &kp F12     &trans                                               &kp SEMI               
            >;
        };
        left_layer {
            bindings = <
                        &kp LBKT      &kp LBRC      &kp PRCNT                                                             &kp LPAR     &kp RPAR      &kp TILDE       
                        &kp AT        &kp HASH      &kp DLLR                                                              &kp MINUS    &kp EQUAL     &kp BSLH             
            &kp EXCL                                          &trans            &trans       &trans      &trans                                               &kp GRAVE              
            >;
        };
        tri_layer {
            bindings = <
                        &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2                                                          &trans       &trans        &trans          
                        &trans       &trans        &trans                                                                &trans       &trans        &trans               
            &bt BT_CLR                                        &trans            &trans       &trans      &trans                                               &trans                 
            >;
        };
    };
};