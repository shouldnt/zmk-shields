/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 #include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define TRIGGER 1
#define BLE_LAYER 2

/ {

    behaviors {
        ctrl_c_z: ctrl_c_ctrl_z {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>, <&kp Z>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
        ctrl_v_y: ctrl_v_ctrl_y {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp Y>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_LCTL)>;
        };
        cmd_c_z: cmd_c_cmd_z {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp Z>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
        cmd_v_y: ctrl_v_cmd_y {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>, <&kp Y>;
            mods = <(MOD_LGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
    };
	macros {
		alttab: alt_tab {
			compatible = "zmk,behavior-macro-one-param";
			wait-ms = <0>;
			tap-ms = <0>;
			#binding-cells = <1>;
			bindings
				= <&macro_press &mo TRIGGER &kp LALT>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_tap &kp TAB>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_release &mo TRIGGER &kp LALT>
				;
		};
		cmdtab: cmd_tab {
			compatible = "zmk,behavior-macro-one-param";
			wait-ms = <0>;
			tap-ms = <0>;
			#binding-cells = <1>;
			bindings
				= <&macro_press &mo TRIGGER &kp LGUI>
				, <&macro_param_1to1>
				, <&macro_press &kp MACRO_PLACEHOLDER>
				, <&macro_tap &kp TAB>
				, <&macro_pause_for_release>
				, <&macro_param_1to1>
				, <&macro_release &kp MACRO_PLACEHOLDER>
				, <&macro_release &mo TRIGGER &kp LGUI>
				;
		};
	};
	combos {
		compatible = "zmk,combos";
		combo_esc_1 {
			timeout-ms = <50>;
			key-positions = <0 1 2>;
			bindings = <&kp ESC>;
		};
		combo_esc_2 {
			timeout-ms = <50>;
			key-positions = <2 5 8>;
			bindings = <&kp ESC>;
        };
		combo_toggle_mac {
			timeout-ms = <50>;
			key-positions = <7 8>;
            layers = <DEFAULT>;
			bindings = <&to 1>;
		};
		combo_toggle_win {
			timeout-ms = <50>;
			key-positions = <7 8>;
            layers = <TRIGGER>;
			bindings = <&to 0>;
		};
		combo_ctrl_insert {
			timeout-ms = <50>;
			key-positions = <3 4>;
            layers = <DEFAULT>;
			bindings = <&kp LC(INSERT)>;
		};
		combo_ctrl_s {
			timeout-ms = <50>;
			key-positions = <0 1>;
            layers = <DEFAULT>;
			bindings = <&kp LC(S)>;
		};

		combo_cmd_insert {
			timeout-ms = <50>;
			key-positions = <3 4>;
            layers = <TRIGGER>;
			bindings = <&kp LG(INSERT)>;
		};
		combo_cmd_s {
			timeout-ms = <50>;
			key-positions = <0 1>;
            layers = <TRIGGER>;
			bindings = <&kp LG(S)>;
		};
		combo_ble_layer {
			timeout-ms = <50>;
			key-positions = <6 7 8>;
            layers = <DEFAULT>;
			bindings = <&mo BLE_LAYER>;
		};
	};
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
				&mt LCTRL LC(A) &ctrl_c_z &ctrl_v_y
				&alttab 0 &alttab LSHIFT &kp LG(V)
				&lt TRIGGER LC(GRAVE) &kp LC(P) &kp F12
            >;
        };
        trigger_layer {
            bindings = <
				&kp LCTRL &kp Z &trans 
				&kp TAB &kp TAB &trans
				&trans &kp LA(UP) &kp LA(DOWN)
            >;
        };
        ble_layer {
            bindings = <
				&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2
				&bt BT_CLR &trans &trans
				&trans &trans &trans
            >;
        };
    };
};